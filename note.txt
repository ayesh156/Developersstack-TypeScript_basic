//=============== Watching mode
tsc --watch index

//=============== Typescript configuration
tsc --init

//=============== Sample
let age:number = 10;
console.log(age);

//================ create folder structure
tsc --init
Set target :- ES6
Uncomment :-rootDir,outDir,noEmitOnError,noEmitOnError

//=============== Variables
let age:number = 10;
let studentName:string = "Thisara Lakshan";
let isActive:boolean=true;
let myObject:null = null;
let undefinedData:undefined = undefined;
let animals:Array<string>=['','',''];
let vehicles:string[]=['','',''];
let student:{name:string,age:number}={name:"ranil",age:20};
//-------------
interface Animal{
    name:string;
    breed:string;
    age:number
}
let dog:Animal = {name:"Togo",breed:"Husky",age:2};
console.log(dog.name);
//-------------
function getAgeAfterThreeY(age:number,name?:string){
    if(name){
        console.log(`Hello ${name}`);
        console.log(`Hello ${age}`);
    }else{
        console.log(`Hello ${age}`);  
    }
    return age+3;
}
let myAge:number=getAgeAfterThreeY(10);
let myNewAge:number=getAgeAfterThreeY(10,'Thushara');
console.log(myAge);

//-------------
const rate:number=1.5;
// rate=2.5;

//=============== Type inference
let myName = 'Ayesh';
console.log(typeof myName);

//=============== Arrays
let numbers:number[]=[10,20,30,40];
console.log(numbers[0]); // 10

//-------------
let strings:Array<string>=['','','',''];

//-------------
strings.push('10'); // add
strings.pop(); // rid the last element

//=============== Tuple
let student:[string,number]=['Saman',20];

//-------------
for(let i = 0; i < numbers.length; i++){
    console.log(numbers[i]);
}

for(let temp of numbers){
    console.log(temp);
}

//-------------

let names = ['Ranil','Mahinda','Basil'];
console.log(names);

//-------------

for(let x = 0; x < names.length;x++){
    console.log(names[x]);
}

//-------------
for(const temp of names){
    console.log(temp);
}

//=============== Function
function sayHello(message: string):void{
    console.log(`Message : ${message}`);
}

sayHello('Hello Folks!');

//=============== Arrow Function
const hello = (message:string):void=>{
    console.log(message);
}

hello("Ayesh");

//=============== Function Expression
const hello = function(message:string):void{
    console.log(message);
}

hello("Ayesh");

//------------- Optional Parameters
function horekda(name:string, thief?:boolean):void{
    if(thief){
        console.log(`${name} a thief!`);
    } else {
        console.log(`${name} not a thief!`);
    }
}

horekda('Ranil',true);
horekda('Anura');

//------------- Default Parameters
function sum(numberOne:number, numberTwo=10):void{
    console.log(numberOne+numberTwo);
}

sum(22);

//------------- Rest Parameters
function sum(...values:number[]):number{
    let count:number = 0;
    for(let temp of values){
        count+=temp;
    }
    return count;
}

console.log(sum(10,20,30,40));

//------------- 
function sum(...values:number[]):number{
    let ttl = 0;
    for(const temp of values){
        ttl+=temp;
    }
    return ttl;
}

console.log(sum(10,30));
console.log(sum(10,20,30,40));
console.log(sum());

