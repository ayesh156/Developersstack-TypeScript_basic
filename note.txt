//=============== Watching mode
tsc --watch index

//=============== Typescript configuration
tsc --init

//=============== Sample
let age:number = 10;
console.log(age);

//================ create folder structure
tsc --init
Set target :- ES6
Uncomment :-rootDir,outDir,noEmitOnError,noEmitOnError

//=============== Variables
let age:number = 10;
let studentName:string = "Thisara Lakshan";
let isActive:boolean=true;
let myObject:null = null;
let undefinedData:undefined = undefined;
let animals:Array<string>=['','',''];
let vehicles:string[]=['','',''];
let student:{name:string,age:number}={name:"ranil",age:20};
//-------------
interface Animal{
    name:string;
    breed:string;
    age:number
}
let dog:Animal = {name:"Togo",breed:"Husky",age:2};
console.log(dog.name);
//-------------
function getAgeAfterThreeY(age:number,name?:string){
    if(name){
        console.log(`Hello ${name}`);
        console.log(`Hello ${age}`);
    }else{
        console.log(`Hello ${age}`);  
    }
    return age+3;
}
let myAge:number=getAgeAfterThreeY(10);
let myNewAge:number=getAgeAfterThreeY(10,'Thushara');
console.log(myAge);

//-------------
const rate:number=1.5;
// rate=2.5;

//=============== Type inference
let myName = 'Ayesh';
console.log(typeof myName);

//=============== Arrays
let numbers:number[]=[10,20,30,40];
console.log(numbers[0]); // 10

//-------------
let strings:Array<string>=['','','',''];

//-------------
strings.push('10'); // add
strings.pop(); // rid the last element

//=============== Tuple
let student:[string,number]=['Saman',20];

//-------------
for(let i = 0; i < numbers.length; i++){
    console.log(numbers[i]);
}

for(let temp of numbers){
    console.log(temp);
}

//-------------

let names = ['Ranil','Mahinda','Basil'];
console.log(names);

//-------------

for(let x = 0; x < names.length;x++){
    console.log(names[x]);
}

//-------------
for(const temp of names){
    console.log(temp);
}

//=============== Function
function sayHello(message: string):void{
    console.log(`Message : ${message}`);
}

sayHello('Hello Folks!');

//=============== Arrow Function
const hello = (message:string):void=>{
    console.log(message);
}

hello("Ayesh");

//=============== Function Expression
const hello = function(message:string):void{
    console.log(message);
}

hello("Ayesh");

//------------- Optional Parameters
function horekda(name:string, thief?:boolean):void{
    if(thief){
        console.log(`${name} a thief!`);
    } else {
        console.log(`${name} not a thief!`);
    }
}

horekda('Ranil',true);
horekda('Anura');

//------------- Default Parameters
function sum(numberOne:number, numberTwo=10):void{
    console.log(numberOne+numberTwo);
}

sum(22);

//------------- Rest Parameters
function sum(...values:number[]):number{
    let count:number = 0;
    for(let temp of values){
        count+=temp;
    }
    return count;
}

console.log(sum(10,20,30,40));

//------------- 
function sum(...values:number[]):number{
    let ttl = 0;
    for(const temp of values){
        ttl+=temp;
    }
    return ttl;
}

console.log(sum(10,30));
console.log(sum(10,20,30,40));
console.log(sum());

//=============== Objects

//------------- Literals
const student = {
    name: 'Thathsara',
    age:32,
    address:{
        city:'Kalutara',
        postal:12500
    }
}

console.log(student);
console.log(student.name);
console.log(student.address);
console.log(student.address.city);

//------------- interface base

interface Student{
    name:string;
    age:number;
    address:{
        city:string;
        postal:number
    }
}


const student:Student = {
    name: 'Thathsara',
    age:32,
    address:{
        city:'Kalutara',
        postal:12500
    }
}

console.log(student);
console.log(student.name);
console.log(student.address);
console.log(student.address.city);

//------------- class base

class Student{
    name:string;
    age:number;
    address:{
        city:string;
        postal:number
    }

    constructor(name:string, age:number, address:{city:string, postal:number}){
        this.name = name;
        this.age = age;
        this.address = address;
    }
}

const student = new Student("Eshara",90,{city:"Matara",postal:12500});
console.log(student);

//=============== Encapsulation

class Dog {

    private name:string;
    private age:number;
    constructor(name:string, age:number){
        this.name=name;
        this.age=age;
    }

    public setAge(age:number) {
        if(age<0){
            return;
        }
        this.age=age;
    }

}

const d1 = new Dog("Togo",1);
d1.setAge(10);

//=============== Optional | readonly

interface Animal{
    name:string;
    age?:number;
    readonly isActive:boolean;
}

const a1:Animal={
    name:'Dog',
    isActive:true
}

const a2:Animal={
    name:'Dog',
    age:10,
    isActive:false
}


a1.isActive = false;

//=============== Interface extends
/* interface => extends => interface
class => implements => interface
class => extends => class */

interface Person{
    name:string;
    age:number;
    canEnglish:boolean
}

interface Thisara extends Person{
    canTamil:boolean;
}

interface Eshara extends Person{

}

const thisara:Thisara = {name:"Thisara",age:23,canTamil:true,canEnglish:true};
const eshara:Eshara = {name:"Eshara",age:22,canEnglish:true};

//=============== Inheritance

class Animal{
    name:string;
    age:number;

    constructor(name:string, age:number){
        this.name = name;
        this.age = age;
    }

    public sound():void{
        console.log(`${this.name} sound`);
    }
}

class Dog extends Animal{
    breed:string;
    constructor(name:string, age:number, breed:string){
        super(name,age);
        this.breed = breed;
    }
}

let animal = new Animal('Animal',10);
let dog = new Dog('Animal',10,'Dog breed');

console.log(animal);
console.log(dog);
animal.sound();
dog.sound();

//=============== Abstract class

abstract class Phone1{ // eshan
    private displaySize:number;
    constructor(displaySize:number){
        this.displaySize=displaySize;
    }

    call():void{
        console.log('calling...!');
    }

    message():void{
        console.log('messaging...!');
    }

    abstract fileTransfer():void;
} // Enjeck

abstract class PhoneOshada extends Phone1{ // oshada
    dance():void{
        console.log('dancing...!');
    }
}

abstract class hasanthaPhone extends PhoneOshada{
    fileTransfer():void{
        console.log('hureeeee...!');
    }
}

//=============== Generics

function getData<T>(value:T):T{
    return value;
}

let numberValue = getData<number>(10);
let stringValue = getData<string>("nimal");

console.log(numberValue);
console.log(stringValue);

//------------- 

interface Shape<T>{
    type:T;
}

let s1:Shape<string> = {type:'type string'}
let s2:Shape<number> = {type:150}
let s3:Shape<boolean> = {type:true}

//=============== Generics Constraints

interface elementLength{
    length:number
}

function showLength<T extends elementLength>(value:T):void{
    console.log(value.length);
}

showLength([10,20,30]);
showLength('Muthuu');
// showLength(false);

//=============== Error Handling

function dev(num1:number,num2:number){
    if(num2==0){
        throw new Error('Wrong Input!');
    }
    return num1/num2;
}

try{
    let answer = dev(10,0);
console.log(answer);
}catch(error){
    console.error(error);
}finally{
    console.log('finally');
}

